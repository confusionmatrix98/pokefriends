{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","id","className","src","width","height","alt","CardList","pokemons","map","poke","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestPokemons","searchField","onSearchChange","isPending","filteredPokemons","filter","pokemon","toLowerCase","includes","connect","searchPokemons","requestPokemons","dispatch","event","payload","target","value","fetch","then","response","json","data","results","user","i","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStatePokemons","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5ef9c205.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, id}) => {\r\n    return (\r\n        <div className='bg-light-green br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} width='128px' height='128px' alt='pokemon' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{`#${id}`}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({pokemons}) => {\r\n    return (\r\n        <div className='flex flex-wrap justify-center'>\r\n            {pokemons.map((poke) => {\r\n                return (\r\n                    <Card \r\n                    key={poke.id} \r\n                    name={poke.name} \r\n                    id={poke.id}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search pokemons' \r\n                onChange={ searchChange }\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '80vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops! That is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestPokemons } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchPokemons.searchField,\r\n        pokemons: state.requestPokemons.pokemons,\r\n        isPending: state.requestPokemons.isPending,\r\n        error: state.requestPokemons.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestPokemons: () => dispatch(requestPokemons())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestPokemons();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, pokemons, isPending } = this.props;\r\n        const filteredPokemons = pokemons.filter(pokemon => {\r\n            return pokemon.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1 className='tc'>Loading...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1 dib grow'>Pokefriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList pokemons={filteredPokemons} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_POKEMONS_PENDING,\r\n    REQUEST_POKEMONS_SUCCESS,\r\n    REQUEST_POKEMONS_FAILED \r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestPokemons = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_POKEMONS_PENDING });\r\n    fetch('https://pokeapi.co/api/v2/pokemon/?offset=0&limit=800')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_POKEMONS_SUCCESS, payload: data.results.map((user, i) => ({...user, id: i+1})) }))\r\n        .catch(error => dispatch({ type: REQUEST_POKEMONS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_POKEMONS_PENDING = 'REQUEST_POKEMONS_PENDING';\r\nexport const REQUEST_POKEMONS_SUCCESS = 'REQUEST_POKEMONS_SUCCESS';\r\nexport const REQUEST_POKEMONS_FAILED = 'REQUEST_POKEMONS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_POKEMONS_PENDING,\r\n    REQUEST_POKEMONS_SUCCESS,\r\n    REQUEST_POKEMONS_FAILED \r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchPokemons = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStatePokemons = {\r\n    isPending: false,\r\n    pokemons: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestPokemons = (state=initialStatePokemons, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_POKEMONS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_POKEMONS_SUCCESS:\r\n            return Object.assign({}, state, { pokemons: action.payload, isPending: false })\r\n        case REQUEST_POKEMONS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchPokemons, requestPokemons } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchPokemons, requestPokemons });\r\nconst store = \r\n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n                <Provider store={store}>\r\n                    <App />\r\n                </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}